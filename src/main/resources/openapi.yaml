openapi: 3.0.1
info:
  title: User Service API
  version: "1.0"
paths:
  /api/users/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        "200":
          description: Registered user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
  /api/users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      responses:
        "200":
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenDto'
  /api/users/me:
    get:
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
    put:
      summary: Update current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
  /api/users:
    get:
      summary: List all users (ADMIN only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
  /api/users/{id}:
    get:
      summary: Get user by id (ADMIN only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: User by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
  /api/users/verify:
    get:
      summary: Verify email
      parameters:
        - name: token
          in: query
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Email verified
          content:
            text/plain:
              schema: { type: string }
components:
  schemas:
    UserRegistrationDto:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
        firstName: { type: string }
        lastName: { type: string }
    UserLoginDto:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
    UserResponseDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        enabled: { type: boolean }
        createdAt: { type: string, format: date-time }
    AuthTokenDto:
      type: object
      properties:
        token: { type: string }
        expiresAt: { type: string, format: date-time }
        type: { type: string }
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
