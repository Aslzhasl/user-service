openapi: 3.0.3
info:
  title: User Service API
  version: '1.0'
  description: API for user registration, authentication, and profile management

servers:
  - url: http://localhost:8080/api
    description: Local dev server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistrationDto:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          example: "nissf@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 100
          example: "password1"
        firstName:
          type: string
          example: "Asl"
        lastName:
          type: string
          example: "Ivanov"
        role:
          type: string
          example: "ADMIN"

    UserLoginDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "nissf@example.com"
        password:
          type: string
          example: "password1"

    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time

    AuthTokenDto:
      type: object
      properties:
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
        tokenType:
          type: string
          example: Bearer
        roles:
          type: array
          items:
            type: string

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'

  /users/login:
    post:
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      responses:
        '200':
          description: JWT token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenDto'

  /users/me:
    get:
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'

    put:
      summary: Update current user info
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        '200':
          description: Updated user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'

  /users/verify:
    get:
      summary: Verify email
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Email verification token
      responses:
        '200':
          description: Email verified

  /users:
    get:
      summary: List all users (ADMIN only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'

  /users/{id}:
    get:
      summary: Get user by ID (ADMIN only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: User ID (UUID)
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
